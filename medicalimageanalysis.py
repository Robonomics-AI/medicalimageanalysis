import json

import openai
import os
from dotenv import load_dotenv


class AzureOpenAIWrapper:

    def __init__(self):
        load_dotenv()
        self.api_base = os.getenv("AZURE_ENDPOINT")
        self.api_key = os.getenv("API_KEY")
        self.deployment_name = os.getenv("AZURE_MODEL_DEPLOYMENT")
        self.api_version = os.getenv("API_VERSION")

    def create_image_analysis(self, prompt, base64_image, max_tokens=3000):
        client = openai.AzureOpenAI(
            api_key=self.api_key,
            api_version=self.api_version,
            base_url=f"{self.api_base}/openai/deployments/{self.deployment_name}"
        )
        response = client.chat.completions.create(model=self.deployment_name,
                                                  messages=[{"role": "system", "content": prompt},
                                                            {"role": "user", "content":
                                                                [
                                                                    {
                                                                        "type": "text",
                                                                        "text": "Analyse the medical image"
                                                                    },
                                                                    {
                                                                        "type": "image_url",
                                                                        "image_url": {
                                                                            "url": f"data:image/jpeg;base64,"
                                                                                   f"{base64_image}"
                                                                        }

                                                                    }
                                                                ]
                                                             }
                                                            ],
                                                  max_tokens=max_tokens,
                                                  )
        return response.choices[0].message.content


def analyse_medical_image(base64_image_json):
    base64_image_dict = json.loads(json.dumps(base64_image_json))
    base64_image = base64_image_dict["base_64_encoding"]
    prompt = """
            You are a medical practitioner and an expert in analysing medical 
            images, pathology reports, prescriptions, handwriting, symptoms and other DICOM images.

            Generate detailed clinical insights from analysis of the image using appropriate medical terminology with 
            headers as shown in the bold text as shown below. The pointers within the headers should be in 
            bullet points.

            Disclaimer: This report is generated by an automated system in Beta release. It should not be interpreted 
            as a definitive diagnosis or treatment plan, without a human expert validating the findings. 

            Overall Impression: 
            Briefly describe the type of image provided (e.g., X-ray, CT scan, MRI, Pathology Reports, 
            Medical Prescriptions, Ultrasound). 
            Mention the body part or region visualized in the image, if applicable. 

            Findings: 
            Describe any identified abnormalities, anomalies or suspicious regions within the image. 
            If no abnormalities are detected, state "No significant abnormalities identified." 

            Next Steps: 
            Based on the findings, recommend any additional tests or investigations that might be necessary for 
            further evaluation. 
            Examples might include specific blood tests, biopsies, or consultations with specialists. 
            If no further workup is suggested, state "No further imaging recommended at this time." 

            Second Opinion:
            If a written report of the image is available, provide a second opinion. Highlight any points missed in the 
            existing report. 

            Recommendations:
            Suggest what further investigation a clinician needs to perform. If necessary, suggest a 
            physical examination, face-to-face or remote consultation. Make recommendations on what a provider needs to 
            look out for in such an examination. 

            If no specific recommendations are warranted, state "No specific recommendations based on this image alone." 

            References: 
            Include citations for any relevant medical literature that supports your findings and recommendations. 
            This proves the basis for your interpretation and allows the doctor to delve deeper if needed. 

            Limitations: 
            Acknowledge any limitations of the analysis based on the image quality or content.
            For example, mention if certain structures are obscured, or if the image resolution is insufficient for a 
            definitive diagnosis. 

            Summary:
            Summarize the key findings and their potential clinical significance in a clear and concise manner. 
            """
    client = AzureOpenAIWrapper()
    output = client.create_image_analysis(prompt, base64_image)
    medical_analysis_output = {"medical_analysis": output}

    return medical_analysis_output


if __name__ == '__main__':
    with open("output.json", "r") as outfile:
        base64_embedding = outfile.read()
    r = analyse_medical_image(base64_embedding)
    print(r)
